generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collaboration {
  id              Int      @id @default(autoincrement())
  user_id         Int
  collaborator_id Int
  account_id      Int
  status          Boolean
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  collaborator    User     @relation("CollaboratorCollaborations", fields: [collaborator_id], references: [id])
  user            User     @relation("UserCollaborations", fields: [user_id], references: [id])
}

model Budget {
  id                  Int             @id @default(autoincrement())
  user_id             Int
  name                String
  amount              Float
  budgets_category_id Int
  account_id          Int
  set_limit           Float
  start_date          DateTime
  end_date            DateTime
  created_at          DateTime        @default(now())
  updated_at          DateTime        @default(now())
  duration            DateTime
  BudgetsCategory     BudgetsCategory @relation(fields: [budgets_category_id], references: [id])
  User                User            @relation(fields: [user_id], references: [id])
}

model GoalCategory {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  Goal       Goal[]
}

model UserEmail {
  id               Int    @id @default(autoincrement())
  sender           String
  receiver         String
  response_details Int
  created_at       Int
  updated_at       Int
}

model InstitutionAccount {
  id                  Int      @id @default(autoincrement())
  user_id             Int
  plaid_account_id    String
  account_name        String
  account_type        String
  institution_id      Int
  institution_name    String
  mask                String
  subtype             String
  verification_status String
  balance             Float
  available_balance   Float
  created_at          DateTime
  updated_at          DateTime
  User                User     @relation(fields: [user_id], references: [id])
}

model PlaidItem {
  id            Int                             @id @default(autoincrement())
  plaid_item_id String
  user_id       Int
  access_token  String
  public_token  String
  ins_id        String
  ins_name      String
  created_at    DateTime                        @default(now())
  updated_at    DateTime                        @default(now())
  plaid         PlaidInstitutionImportHistory[]
  user          User                            @relation(fields: [user_id], references: [id])

  AssetPlaidItem PlaidAssetItem?
}

model PlaidInstitutionImportHistory {
  id            Int       @id @default(autoincrement())
  plaid_item_id Int
  user_id       Int
  access_token  String
  ins_id        String
  imported_at   DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())
  plaidItem     PlaidItem @relation(fields: [plaid_item_id], references: [id])
  user          User      @relation(fields: [user_id], references: [id])
}

model BudgetsCategory {
  id         Int      @id @default(autoincrement())
  name       Int
  icon       String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  Budget     Budget[]
}

model User {
  id                            Int                             @id @default(autoincrement())
  email                         String                          @unique
  active                        Boolean                         @default(false)
  password                      String
  otp_verified                  Boolean                         @default(false)
  user_otp                      Int
  user_otp_createdAt            DateTime?
  user_role                     UserRole                        @default(BASIC)
  device_token                  String
  created_at                    DateTime                        @default(now())
  updated_at                    DateTime                        @updatedAt
  account                       Account[]
  budget                        Budget[]
  collaboratedWith              Collaboration[]                 @relation("CollaboratorCollaborations")
  collaborations                Collaboration[]                 @relation("UserCollaborations")
  institution_account           InstitutionAccount[]
  plaidInstitutionImportHistory PlaidInstitutionImportHistory[]
  plaidItems                    PlaidItem[]
  user_details                  UserDetails?
  investment_account            InvestmentAccounts[]
  asset_accounts                AssetAccount[]
  PlaidAssetItem                PlaidAssetItem[]
  userSubscription              UserSubscription?
  userPayments                  Payment[]
  userAssetsDetails             UserAssetsDetails[]
  manualInvestments             ManualInvestments[]
}

model Goal {
  id               Int          @id @default(autoincrement())
  user_id          Int
  goal_category_id Int
  name             String
  created_at       DateTime     @default(now())
  updated_at       DateTime     @default(now())
  GoalCategory     GoalCategory @relation(fields: [goal_category_id], references: [id])
}

model UserDetails {
  id          Int      @id @default(autoincrement())
  user_id     Int      @unique
  firstname   String
  lastname    String
  dateofbirth DateTime
  phonenumber String
  gender      String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  user        User     @relation(fields: [user_id], references: [id])
}

model Transaction {
  id                   Int      @id @default(autoincrement())
  account_id           Int
  plaid_transaction_id String
  name                 String
  amount               Float
  category_id          String
  category_name        String[]
  date                 DateTime
  pending              Boolean
  created_at           DateTime @default(now())
  updated_at           DateTime @default(now())
  Account              Account  @relation(fields: [account_id], references: [id])

  @@unique([plaid_transaction_id, account_id, date])
}

model Account {
  id                  Int           @id @default(autoincrement())
  user_id             Int
  account_name        String
  account_id          String
  institution_name    String
  official_name       String
  mask                String
  type                String
  subtype             String
  institution_id      String
  verification_status String
  created_at          DateTime
  updated_at          DateTime
  User                User          @relation(fields: [user_id], references: [id])
  Balance             Balance[]
  Transaction         Transaction[]
}

model Balance {
  id                Int      @id @default(autoincrement())
  account_tbl_id    Int
  current_balance   Float
  available_balance Float
  iso_currency_code String
  date              DateTime
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())
  Account           Account  @relation(fields: [account_tbl_id], references: [id])
}

enum UserRole {
  BASIC
  PREMIUM
}

model InvestmentAccounts {
  id                  Int      @id @default(autoincrement())
  user_id             Int
  account_name        String
  account_id          String   @unique
  official_name       String?
  mask                String
  type                String
  subtype             String
  verification_status String
  created_at          DateTime
  updated_at          DateTime

  // References
  User User @relation(fields: [user_id], references: [id])

  investmentHolding InvestmentHolding[]
  Transactions      InvestmentTransactions[]
  Balance           InvestmentBalance[]
}

model InvestmentTransactions {
  id                        Int                @id @default(autoincrement())
  account_id                Int
  cancel_transaction_id     String?            @default("NA")
  amount                    Float
  date_of_transaction       DateTime
  fees                      Float
  investment_transaction_id String
  iso_currency_code         String?
  name                      String
  price                     Float
  quantity                  Decimal
  security_id               String
  subtype                   String
  type                      String
  unofficial_currency_code  String?
  platform                  String             @default("plaid")
  created_at                DateTime           @default(now())
  updated_at                DateTime           @default(now())
  // References
  investment_account        InvestmentAccounts @relation(fields: [account_id], references: [id])

  @@unique([account_id, investment_transaction_id, date_of_transaction])
}

model InvestmentBalance {
  id                Int      @id @default(autoincrement())
  account_id        Int
  current_balance   Float
  available_balance Float
  iso_currency_code String?
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())

  // References
  investment_account InvestmentAccounts @relation(fields: [account_id], references: [id])
}

// Schema for Investment Holdings
model InvestmentHolding {
  id                         Int       @id @default(autoincrement())
  account_id                 String
  cost_basis                 Float
  institution_price          Float
  institution_price_as_of    DateTime?
  institution_price_datetime DateTime?
  institution_value          Float
  iso_currency_code          String
  quantity                   Float
  security_id                String
  unofficial_currency_code   String?

  investment_account  InvestmentAccounts @relation(fields: [account_id], references: [account_id])
  investment_security InvestmentSecurity @relation(fields: [security_id], references: [security_id])
  created_at          DateTime           @default(now())
  updated_at          DateTime           @default(now())

  @@unique([account_id, security_id])
}

model InvestmentCategories {
  id          Int      @id @default(autoincrement())
  name        String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  manualInvestments ManualInvestments[]
}

model ManualInvestments {
  id          Int      @id @default(autoincrement())
  name        String
  amount      Float
  currency    String
  price       Int
  quantity    Int
  user_id     Int
  category_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  user               User                 @relation(fields: [user_id], references: [id])
  investmentCategory InvestmentCategories @relation(fields: [category_id], references: [id])
}

model InvestmentSecurity {
  id                       Int       @id @default(autoincrement())
  security_id              String
  close_price              Float?
  close_price_as_of        DateTime?
  cusip                    String?
  institution_id           String?
  institution_security_id  String?
  is_cash_equivalent       Boolean
  isin                     String?
  iso_currency_code        String
  market_identifier_code   String?
  name                     String?
  option_contract          String?
  proxy_security_id        String?
  sedol                    String?
  ticker_symbol            String?
  type                     String
  unofficial_currency_code String?
  update_datetime          DateTime?
  created_at               DateTime  @default(now())
  updated_at               DateTime  @default(now())

  InvestmentHolding InvestmentHolding[]

  @@unique([security_id])
}

//the CategoryHierarchy model
model TransactionCategory {
  id          Int      @id @default(autoincrement()) // Unique identifier for the category hierarchy
  category_id String // Category ID, assumed to be a string in this case
  group       String // Group to which the category belongs (e.g., "special")
  hierarchy   String[] // Array storing the hierarchy levels (e.g., ["Bank Fees", "Overdraft"])
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
}

model PlaidAssetItem {
  id                 Int      @id @default(autoincrement())
  asset_report_token String
  user_id            Int
  plaid_item_id      Int      @unique
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  user               User     @relation(fields: [user_id], references: [id])

  PlaidItem PlaidItem @relation(fields: [plaid_item_id], references: [id])
}

model AssetAccount {
  id                       Int                      @id @default(autoincrement())
  account_id               String                   @unique
  balance_available        Decimal?
  balance_current          Decimal
  iso_currency_code        String?
  balance_limit            Decimal?
  unofficial_currency_code String?
  days_available           Int?
  user_id                  Int
  mask                     String
  name                     String
  ownership_type           String?
  subtype                  String
  type                     String
  created_at               DateTime                 @default(now())
  updated_at               DateTime                 @updatedAt
  user                     User                     @relation(fields: [user_id], references: [id])
  historicalBalances       AssetHistoricalBalance[]
  transactions             AssetTransaction[]
}

model AssetHistoricalBalance {
  id             Int          @id @default(autoincrement())
  account        AssetAccount @relation(fields: [account_id], references: [account_id])
  account_id     String
  balance_date   DateTime // or Date, based on your needs
  balance_amount Decimal
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt

  @@unique([account_id, balance_date])
}

model AssetTransaction {
  id                   Int          @id @default(autoincrement())
  account              AssetAccount @relation(fields: [account_id], references: [account_id])
  account_id           String
  transaction_id       String
  transaction_type     String
  date                 DateTime // or Date, based on your needs
  date_transacted      DateTime
  transaction_name     String
  transaction_amount   Decimal
  transaction_currency String?
  check_number         String?
  merchant_name        String?
  pending              Boolean
  category_id          String
  category             String[]
  created_at           DateTime     @default(now())
  updated_at           DateTime     @updatedAt

  @@unique([account_id, transaction_id, transaction_type, category_id])
}

model Subscriptions {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  price       Float
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userSubscription UserSubscription?
  payments         Payment[]
}

model UserSubscription {
  id              Int       @id @default(autoincrement())
  user_id         Int       @unique
  subscription_id Int       @unique
  expiredAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user         User          @relation(fields: [user_id], references: [id])
  subscription Subscriptions @relation(fields: [subscription_id], references: [id])
}

model Payment {
  id             String        @id @default(uuid())
  userId         Int
  user           User          @relation(fields: [userId], references: [id])
  subscription   Subscriptions @relation(fields: [subscriptionId], references: [id])
  subscriptionId Int
  amount         Float
  currency       String
  paymentMethod  String
  transactionId  String
  status         PaymentStatus
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model AssetType {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  assetSubType      AssetSubType[]
  UserAssetsDetails UserAssetsDetails[]
  assetFields       AssetFields[]
}

model AssetSubType {
  id          Int      @id @default(autoincrement())
  asset_id    Int
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  asset AssetType @relation(fields: [asset_id], references: [id])

  assetFields       AssetFields[]
  UserAssetsDetails UserAssetsDetails[]
}

model AssetFields {
  id           Int      @id @default(autoincrement())
  asset_id     Int
  asset_sub_id Int
  name         String
  label        String
  type         String
  options      String[]
  order_id     Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  asset_sub_type    AssetSubType        @relation(fields: [asset_sub_id], references: [id])
  asset_type        AssetType           @relation(fields: [asset_id], references: [id])
  UserAssetsDetails UserAssetsDetails[]
}

model UserAssetsDetails {
  id           Int      @id @default(autoincrement())
  user_id      Int
  asset_id     Int
  asset_sub_id Int
  field_id     Int
  value        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  asset          AssetType    @relation(fields: [asset_id], references: [id])
  asset_field    AssetFields  @relation(fields: [field_id], references: [id])
  asset_sub_type AssetSubType @relation(fields: [asset_sub_id], references: [id])
  user           User         @relation(fields: [user_id], references: [id])
}
