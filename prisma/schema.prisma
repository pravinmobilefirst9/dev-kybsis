generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CollaborationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Collaboration {
  id              Int                 @id @default(autoincrement())
  user_id         Int
  collaborator_id Int
  budget_id       Int
  status          CollaborationStatus @default(PENDING)
  created_at      DateTime            @default(now())
  updated_at      DateTime            @updatedAt

  // Add the relation scalar field here
  budget       Budget @relation(fields: [budget_id], references: [id]) // This line creates the many to one relation
  collaborator User   @relation("CollaboratorCollaborations", fields: [collaborator_id], references: [id])
  user         User   @relation("UserCollaborations", fields: [user_id], references: [id])
}

enum Duration {
  Monthly
  Annually
}

model Budget {
  id                  Int              @id @default(autoincrement())
  user_id             Int
  name                String
  amount              Float
  budgets_category_id Int
  start_date          DateTime
  created_at          DateTime         @default(now())
  updated_at          DateTime         @updatedAt
  duration            Duration
  collaborations      Collaboration[] // This line indicates that a Budget can have many Collaborations
  BudgetCategory      BudgetCategories @relation(fields: [budgets_category_id], references: [id])
  User                User             @relation(fields: [user_id], references: [id])
}

model UserEmail {
  id               Int      @id @default(autoincrement())
  sender           String
  receiver         String
  response_details Int
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
}

model InstitutionAccount {
  id                  Int      @id @default(autoincrement())
  user_id             Int
  plaid_account_id    String
  account_name        String
  account_type        String
  institution_id      Int
  institution_name    String
  mask                String
  subtype             String
  verification_status String
  balance             Float
  available_balance   Float
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  User                User     @relation(fields: [user_id], references: [id])
}

model PlaidItem {
  id              Int                             @id @default(autoincrement())
  plaid_item_id   String?
  user_id         Int
  access_token    String?
  public_token    String?
  ins_id          String
  manual          Boolean                         @default(false)
  ins_name        String
  created_at      DateTime                        @default(now())
  updated_at      DateTime                        @updatedAt
  manuallyDeleted Boolean                         @default(false)
  plaid           PlaidInstitutionImportHistory[]
  user            User                            @relation(fields: [user_id], references: [id])

  AssetPlaidItem       PlaidAssetItem?
  investmentAccounts   InvestmentAccounts[]
  TransactionsAccounts Account[]
  Forecasts            Forecast[]
  ManualAssets         UserManualAssets[]
  ManualInvestment     ManualInvestments[]
}

model PlaidInstitutionImportHistory {
  id            Int       @id @default(autoincrement())
  plaid_item_id Int
  user_id       Int
  access_token  String
  ins_id        String
  imported_at   DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  plaidItem     PlaidItem @relation(fields: [plaid_item_id], references: [id])
  user          User      @relation(fields: [user_id], references: [id])
}

model User {
  id                      Int       @id @default(autoincrement())
  email                   String    @unique
  active                  Boolean   @default(false)
  password                String
  otp_verified            Boolean   @default(false)
  user_otp                Int
  user_otp_createdAt      DateTime?
  user_role               UserRole  @default(FREE)
  device_token            String
  widgetsAlreadyAdded     Boolean   @default(false)
  stripe_customer_id      String?   @unique
  current_subscription_id Int?
  created_at              DateTime  @default(now())
  updated_at              DateTime  @updatedAt

  account                       Account[]
  budget                        Budget[]
  collaboratedWith              Collaboration[]                 @relation("CollaboratorCollaborations")
  collaborations                Collaboration[]                 @relation("UserCollaborations")
  institution_account           InstitutionAccount[]
  plaidInstitutionImportHistory PlaidInstitutionImportHistory[]
  plaidItems                    PlaidItem[]
  user_details                  UserDetails?
  investment_account            InvestmentAccounts[]
  asset_accounts                AssetAccount[]
  PlaidAssetItem                PlaidAssetItem[]
  userSubscription              UserSubscription?
  userPayments                  Payment[]
  manualInvestments             ManualInvestments[]
  userManualAssets              UserManualAssets[]
  accountForcasting             Forecast[]
  userWidgets                   userWidgets[]
  bankTransactions              Transaction[]
  liabilities                   liabilities[]
  subscriptions                 Subscription[]
  notification                  Notification[]
  totalLiabilities              TotalLiabilities[]
  totalPlaidAssets              TotalAssets[]
  totalInvestmetns              TotalInvestments[]
}

model UserDetails {
  id          Int      @id @default(autoincrement())
  user_id     Int      @unique
  firstname   String
  lastname    String
  dateofbirth DateTime
  phonenumber String
  gender      String
  zipcode     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [user_id], references: [id])
}

model Transaction {
  id                   Int      @id @default(autoincrement())
  account_id           Int
  plaid_transaction_id String?
  name                 String
  amount               Float
  category_id          String?
  category_name        String[]
  date                 DateTime
  pending              Boolean? @default(false)
  manual               Boolean  @default(false)
  user_id              Int
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt
  Account              Account  @relation(fields: [account_id], references: [id], onDelete: Cascade)
  User                 User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([plaid_transaction_id, account_id, date])
}

model Account {
  id                  Int                @id @default(autoincrement())
  user_id             Int
  account_name        String
  account_id          String             @unique
  plaid_item_id       Int?
  institution_name    String
  official_name       String?
  mask                String?
  type                String?
  subtype             String?
  institution_id      String?
  verification_status String?
  current_balance     Float
  available_balance   Float
  iso_currency_code   String
  manual              Boolean            @default(false)
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt
  User                User               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  PlaidItem           PlaidItem?         @relation(fields: [plaid_item_id], references: [id], onDelete: Cascade)
  Transaction         Transaction[]
  ManualAssets        UserManualAssets[]
}

enum UserRole {
  FREE
  BASIC
  PREMIUM
}

model InvestmentAccounts {
  id                  Int      @id @default(autoincrement())
  user_id             Int
  pliad_id            Int
  account_name        String?
  account_id          String   @unique
  official_name       String?
  mask                String?
  type                String?
  subtype             String?
  verification_status String?
  current_balance     Float?  @default(0)
  available_balance   Float?  @default(0)
  iso_currency_code   String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  // References
  User      User      @relation(fields: [user_id], references: [id])
  plaidItem PlaidItem @relation(fields: [pliad_id], references: [id])

  investmentHolding InvestmentHolding[]
  // Transactions      InvestmentTransactions[]
  // Balance           InvestmentBalance[]
}

// model InvestmentTransactions {
//   id                        Int                @id @default(autoincrement())
//   account_id                Int
//   cancel_transaction_id     String?            @default("NA")
//   amount                    Float
//   date_of_transaction       DateTime
//   fees                      Float
//   investment_transaction_id String
//   iso_currency_code         String?
//   name                      String
//   price                     Float
//   quantity                  Decimal
//   security_id               String
//   subtype                   String?
//   type                      String?
//   unofficial_currency_code  String?
//   platform                  String?            @default("plaid")
//   created_at                DateTime           @default(now())
//   updated_at                DateTime           @updatedAt
//   // References
//   investment_account        InvestmentAccounts @relation(fields: [account_id], references: [id])

//   @@unique([account_id, investment_transaction_id, date_of_transaction])
// }

// Schema for Investment Holdings
model InvestmentHolding {
  id                         Int       @id @default(autoincrement())
  account_id                 String
  cost_basis                 Float?
  institution_price          Float?
  institution_price_as_of    DateTime?
  institution_price_datetime DateTime?
  institution_value          Float?
  iso_currency_code          String?
  quantity                   Float?
  security_id                String
  unofficial_currency_code   String?

  investment_account  InvestmentAccounts @relation(fields: [account_id], references: [account_id])
  investment_security InvestmentSecurity @relation(fields: [security_id], references: [security_id])
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt

  @@unique([account_id, security_id])
}

// Including Manual and plaid
model TotalInvestments {
  id                    Int      @id @default(autoincrement())
  userId                Int
  totalManualInvestment Float
  totalPlaidInvestment  Float
  monthYear             DateTime
  createdAt             DateTime @default(now())
  User                  User     @relation(fields: [userId], references: [id])

  @@unique([userId, monthYear])
}

model InvestmentCategories {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  fields     Json[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  manualInvestments ManualInvestments[]
}

model ManualInvestments {
  id          Int      @id @default(autoincrement())
  data        Json[]
  account_id  Int
  ins_id      Int
  user_id     Int
  category_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  Institution        PlaidItem            @relation(fields: [ins_id], references: [id])
  user               User                 @relation(fields: [user_id], references: [id])
  investmentCategory InvestmentCategories @relation(fields: [category_id], references: [id])
}

model InvestmentSecurity {
  id                       Int       @id @default(autoincrement())
  security_id              String    @unique()
  close_price              Float?
  close_price_as_of        DateTime?
  cusip                    String?
  institution_id           String?
  institution_security_id  String?
  is_cash_equivalent       Boolean
  isin                     String?
  iso_currency_code        String
  market_identifier_code   String?
  name                     String?
  option_contract          String?
  proxy_security_id        String?
  sedol                    String?
  ticker_symbol            String?
  type                     String?
  unofficial_currency_code String?
  update_datetime          DateTime?
  created_at               DateTime  @default(now())
  updated_at               DateTime  @updatedAt

  InvestmentHolding InvestmentHolding[]

}

//the CategoryHierarchy model
model TransactionCategory {
  id          Int      @id @default(autoincrement()) // Unique identifier for the category hierarchy
  category_id String // Category ID, assumed to be a string in this case
  hierarchy   String[] // Array storing the hierarchy levels (e.g., ["Bank Fees", "Overdraft"])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model BudgetCategories {
  id            Int      @id @default(autoincrement()) // Unique identifier for the category hierarchy
  category_name String
  category_ids  String[]
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  Budgets       Budget[]
}

model PlaidAssetItem {
  id                 Int      @id @default(autoincrement())
  asset_report_token String
  user_id            Int
  plaid_item_id      Int      @unique
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  user               User     @relation(fields: [user_id], references: [id])

  PlaidItem PlaidItem @relation(fields: [plaid_item_id], references: [id])

  AssetAccount AssetAccount[]
}

model AssetAccount {
  id                       Int                      @id @default(autoincrement())
  account_id               String                   @unique
  plaid_asset_item_id      Int
  balance_available        Decimal?
  balance_current          Decimal
  iso_currency_code        String?
  balance_limit            Decimal?
  unofficial_currency_code String?
  days_available           Int?
  user_id                  Int
  mask                     String
  name                     String
  ownership_type           String?
  subtype                  String
  type                     String
  created_at               DateTime                 @default(now())
  updated_at               DateTime                 @updatedAt
  user                     User                     @relation(fields: [user_id], references: [id])
  plaid_asset_item         PlaidAssetItem           @relation(fields: [plaid_asset_item_id], references: [id])
  historicalBalances       AssetHistoricalBalance[]
  transactions             AssetTransaction[]
}

model TotalAssets {
  id                Int      @id @default(autoincrement())
  userId            Int
  totalPliadAssets  Float
  totalManualAssets Float
  monthYear         DateTime
  createdAt         DateTime @default(now())
  User              User     @relation(fields: [userId], references: [id])

  @@unique([userId, monthYear])
}

model UserManualAssets {
  id               Int      @id @default(autoincrement())
  user_id          Int
  asset_type_id    Int
  asset_subtype_id Int
  account_id       Int
  ins_id           Int
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  Institution   PlaidItem           @relation(fields: [ins_id], references: [id])
  AssetType     AssetType           @relation(fields: [asset_type_id], references: [id])
  AssetSubType  AssetSubType        @relation(fields: [asset_subtype_id], references: [id])
  User          User                @relation(fields: [user_id], references: [id])
  asset_fields  UserAssetsDetails[]
  ManualAccount Account             @relation(fields: [account_id], references: [id])
}

model AssetHistoricalBalance {
  id             Int          @id @default(autoincrement())
  account        AssetAccount @relation(fields: [account_id], references: [account_id])
  account_id     String
  balance_date   DateTime // or Date, based on your needs
  balance_amount Decimal
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt

  @@unique([account_id, balance_date])
}

model AssetTransaction {
  id                   Int          @id @default(autoincrement())
  account              AssetAccount @relation(fields: [account_id], references: [account_id])
  account_id           String
  transaction_id       String
  transaction_type     String
  date                 DateTime // or Date, based on your needs
  date_transacted      DateTime
  transaction_name     String
  transaction_amount   Decimal
  transaction_currency String?
  check_number         String?
  merchant_name        String?
  pending              Boolean
  category_id          String
  category             String[]
  created_at           DateTime     @default(now())
  updated_at           DateTime     @updatedAt

  @@unique([account_id, transaction_id, transaction_type, category_id])
}

model Subscriptions {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  price       Float
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userSubscription UserSubscription?
  payments         Payment[]
}

model UserSubscription {
  id              Int       @id @default(autoincrement())
  user_id         Int       @unique
  subscription_id Int       @unique
  expiredAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user         User          @relation(fields: [user_id], references: [id])
  subscription Subscriptions @relation(fields: [subscription_id], references: [id])
}

model Payment {
  id             String        @id @default(uuid())
  userId         Int
  user           User          @relation(fields: [userId], references: [id])
  subscription   Subscriptions @relation(fields: [subscriptionId], references: [id])
  subscriptionId Int
  amount         Float
  currency       String
  paymentMethod  String
  transactionId  String
  status         PaymentStatus
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model AssetType {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  hasSubType  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  assetSubType     AssetSubType[]
  // UserAssetsDetails UserAssetsDetails[]
  assetFields      AssetFields[]
  userManualAssets UserManualAssets[]
}

model AssetSubType {
  id          Int      @id @default(autoincrement())
  asset_id    Int
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  asset AssetType @relation(fields: [asset_id], references: [id])

  assetFields      AssetFields[]
  // UserAssetsDetails UserAssetsDetails[]
  userManualAssets UserManualAssets[]
}

model AssetFields {
  id            Int      @id @default(autoincrement())
  asset_type_id Int
  asset_sub_id  Int
  name          String
  label         String
  type          String
  options       String[]
  order_id      Int
  mandatory     Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  asset_sub_type    AssetSubType        @relation(fields: [asset_sub_id], references: [id])
  asset_type        AssetType           @relation(fields: [asset_type_id], references: [id])
  UserAssetsDetails UserAssetsDetails[]
}

model UserAssetsDetails {
  id        Int      @id @default(autoincrement())
  asset_id  Int
  field_id  Int
  value     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // asset_type     AssetType        @relation(fields: [asset_type_id], references: [id])
  // asset_sub_type AssetSubType     @relation(fields: [asset_sub_id], references: [id])
  asset_field AssetFields      @relation(fields: [field_id], references: [id])
  asset       UserManualAssets @relation(fields: [asset_id], references: [id])
}

// enum CompoundFrequency {
//   ANNUALLY
//   SEMIANNUALLY
//   QUARTERLY
//   MONTHLY
//   SEMIMONTHLY
//   BIWEEKLY
//   WEEKLY
//   DAILY
//   CONTINUOUSLY
// }

// enum ContributionFrequency {
//   Monthly 
//   Annually
// }

// enum ContributionTiming {
//   BEGINNING
//   End
// }

model Forecast {
  id                     Int      @id @default(autoincrement())
  compound               String   @db.VarChar(255)
  ins_id                 Int
  startingAmount         Float
  returnRate             Float
  investmentLength       Int
  additionalContribution Float
  contributionFrequency  String   @db.VarChar(255)
  accountId              Int
  endBalance             Float
  totalContributions     Float
  totalInterest          Float
  user_id                Int
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  Institution PlaidItem @relation(fields: [ins_id], references: [id])

  // Relations
  user User @relation(fields: [user_id], references: [id])
}

model Widgets {
  id        Int      @id @default(autoincrement())
  name      String
  default   Boolean
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userWidgets userWidgets[]
}

model userWidgets {
  id        Int      @id @default(autoincrement())
  widget_id Int
  user_id   Int
  value     Int
  active    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User    @relation(fields: [user_id], references: [id])
  Widget Widgets @relation(fields: [widget_id], references: [id])

  @@unique([user_id, widget_id])
}

// model liabilities {
//   id                  Int      @id @default(autoincrement())
//   user_id             Int
//   last_payment_date   DateTime
//   account_id          String
//   account_number      String?
//   account_type        String?
//   last_payment_amount Float
//   type                String
//   createdAt           DateTime @default(now())
//   updatedAt           DateTime @updatedAt

//   User User @relation(fields: [user_id], references: [id])

//   @@unique([last_payment_date, user_id, type])
// }

model liabilities {
  id          Int      @id @default(autoincrement())
  accountId   String   @unique
  accountType String
  subtype     String
  current     Float
  available   Float?
  limit       Float?
  isoCurrency String
  userId      Int // Assuming you're tracking data per user
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])

  @@unique([accountId, userId])
}

model TotalLiabilities {
  id          Int      @id @default(autoincrement())
  userId      Int
  totalAmount Float
  monthYear   DateTime
  createdAt   DateTime @default(now())
  User        User     @relation(fields: [userId], references: [id])

  @@unique([userId, monthYear])
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
}

// open : 
enum invoiceStatus {
  OPEN
  PAID
  VOID
}

model Subscription {
  id                   Int                @id @default(autoincrement())
  stripeCustomerId     String
  stripeSubscriptionId String             @unique
  invoiceId            String?
  invoiceUrl           String?
  priceId              String?
  amount               Int?
  currency             String?
  interval             String?
  interval_count       Int?
  product              String?
  subscriptionStatus   SubscriptionStatus // Status of the subscription (e.g., active, canceled, etc.)
  invoiceStatus        invoiceStatus // Status of the subscription (e.g., active, canceled, etc.)
  currentPeriodStart   DateTime? // Start of the current billing period
  currentPeriodEnd     DateTime? // End of the current billing period
  userId               Int

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Institution {
  id             Int      @id @default(autoincrement())
  country_codes  String[] @map(name: "country_codes")
  institution_id String   @map(name: "institution_id")
  name           String
  oauth          Boolean
  products       String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([institution_id])
}

model Feature {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  free      Boolean  @default(false)
  basic     Boolean  @default(false)
  premium   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int // Reference to your User model
  title     String
  body      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}
