generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collaboration {
  id              Int      @id @default(autoincrement())
  user_id         Int
  collaborator_id Int
  account_id      Int
  status          Boolean
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  collaborator    User     @relation("CollaboratorCollaborations", fields: [collaborator_id], references: [id])
  user            User     @relation("UserCollaborations", fields: [user_id], references: [id])
}

model Budget {
  id                  Int             @id @default(autoincrement())
  user_id             Int
  name                String
  amount              Float
  budgets_category_id Int
  account_id          Int
  set_limit           Float
  start_date          DateTime
  end_date            DateTime
  created_at          DateTime        @default(now())
  updated_at          DateTime        @default(now())
  duration            DateTime
  BudgetsCategory     BudgetsCategory @relation(fields: [budgets_category_id], references: [id])
  User                User            @relation(fields: [user_id], references: [id])
}

model GoalCategory {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  Goal       Goal[]
}

model UserEmail {
  id               Int    @id @default(autoincrement())
  sender           String
  receiver         String
  response_details Int
  created_at       Int
  updated_at       Int
}

model InstitutionAccount {
  id                  Int      @id @default(autoincrement())
  user_id             Int
  plaid_account_id    String
  account_name        String
  account_type        String
  institution_id      Int
  institution_name    String
  mask                String
  subtype             String
  verification_status String
  balance             Float
  available_balance   Float
  created_at          DateTime
  updated_at          DateTime
  User                User     @relation(fields: [user_id], references: [id])
}

model PlaidItem {
  id            Int                             @id @default(autoincrement())
  plaid_item_id String
  user_id       Int
  access_token  String
  public_token  String
  ins_id        String
  ins_name      String
  created_at    DateTime                        @default(now())
  updated_at    DateTime                        @default(now())
  plaid         PlaidInstitutionImportHistory[]
  user          User                            @relation(fields: [user_id], references: [id])
}

model PlaidInstitutionImportHistory {
  id            Int       @id @default(autoincrement())
  plaid_item_id Int
  user_id       Int
  access_token  String
  ins_id        String
  imported_at   DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())
  plaidItem     PlaidItem @relation(fields: [plaid_item_id], references: [id])
  user          User      @relation(fields: [user_id], references: [id])
}

model BudgetsCategory {
  id         Int      @id @default(autoincrement())
  name       Int
  icon       String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  Budget     Budget[]
}

model User {
  id                            Int                             @id @default(autoincrement())
  email                         String                          @unique
  active                        Boolean                         @default(false)
  password                      String
  otp_verified                  Boolean                         @default(false)
  user_otp                      Int
  user_role                     UserRole                        @default(USER)
  device_token                  String
  created_at                    DateTime                        @default(now())
  updated_at                    DateTime                        @updatedAt
  account                       Account[]
  budget                        Budget[]
  collaboratedWith              Collaboration[]                 @relation("CollaboratorCollaborations")
  collaborations                Collaboration[]                 @relation("UserCollaborations")
  institution_account           InstitutionAccount[]
  plaidInstitutionImportHistory PlaidInstitutionImportHistory[]
  plaidItems                    PlaidItem[]
  user_details                  UserDetails?
  investment_account            InvestmentAccounts[]
}

model Goal {
  id               Int          @id @default(autoincrement())
  user_id          Int
  goal_category_id Int
  name             String
  created_at       DateTime     @default(now())
  updated_at       DateTime     @default(now())
  GoalCategory     GoalCategory @relation(fields: [goal_category_id], references: [id])
}

model UserDetails {
  id          Int      @id @default(autoincrement())
  user_id     Int      @unique
  firstname   String
  lastname    String
  dateofbirth DateTime
  phonenumber String
  gender      String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  user        User     @relation(fields: [user_id], references: [id])
}

model Transaction {
  id                   Int      @id @default(autoincrement())
  account_id           Int
  plaid_transaction_id String
  name                 String
  amount               Float
  category_id          String
  category_name        String[]
  date                 DateTime
  pending              Boolean
  created_at           DateTime @default(now())
  updated_at           DateTime @default(now())
  Account              Account  @relation(fields: [account_id], references: [id])

  @@unique([plaid_transaction_id, account_id, date])
}

model Account {
  id                  Int           @id @default(autoincrement())
  user_id             Int
  account_name        String
  account_id          String
  institution_name    String
  official_name       String
  mask                String
  type                String
  subtype             String
  institution_id      String
  verification_status String
  created_at          DateTime
  updated_at          DateTime
  User                User          @relation(fields: [user_id], references: [id])
  Balance             Balance[]
  Transaction         Transaction[]
}

model Balance {
  id                Int      @id @default(autoincrement())
  account_tbl_id    Int
  current_balance   Float
  available_balance Float
  iso_currency_code String
  date              DateTime
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())
  Account           Account  @relation(fields: [account_tbl_id], references: [id])
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

model InvestmentAccounts {
  id                  Int      @id @default(autoincrement())
  user_id             Int
  account_name        String
  account_id          String
  official_name       String?
  mask                String
  type                String
  subtype             String
  verification_status String
  created_at          DateTime
  updated_at          DateTime

  // References
  User User @relation(fields: [user_id], references: [id])

  Transactions InvestmentTransactions[]
  Balance      InvestmentBalance[]
}

model InvestmentTransactions {
  id                        Int                @id @default(autoincrement())
  account_id                Int
  cancel_transaction_id     String?            @default("NA")
  amount                    Float
  date_of_transaction       DateTime
  fees                      Float
  investment_transaction_id String
  iso_currency_code         String?
  name                      String
  price                     Float
  quantity                  Decimal
  security_id               String
  subtype                   String
  type                      String
  unofficial_currency_code  String?
  platform                  String             @default("plaid")
  created_at                DateTime           @default(now())
  updated_at                DateTime           @default(now())
  // References
  investment_account        InvestmentAccounts @relation(fields: [account_id], references: [id])
   @@unique([account_id, investment_transaction_id, date_of_transaction])

}

model InvestmentBalance {
  id                Int      @id @default(autoincrement())
  account_id        Int
  current_balance   Float
  available_balance Float
  iso_currency_code String?
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())

  // References
  investment_account InvestmentAccounts @relation(fields: [account_id], references: [id])
}

model InvestmentSecurity {
  id                       Int       @id @default(autoincrement())
  security_id              String
  close_price              Float?
  close_price_as_of        DateTime?
  cusip                    String?
  institution_id           String?
  institution_security_id  String?
  is_cash_equivalent       Boolean
  isin                     String?
  iso_currency_code        String
  market_identifier_code   String?
  name                     String?
  option_contract          String?
  proxy_security_id        String?
  sedol                    String?
  ticker_symbol            String?
  type                     String
  unofficial_currency_code String?
  update_datetime          DateTime?
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())

  @@unique([security_id])
}

//the CategoryHierarchy model
model TransactionCategory {
  id          Int       @id @default(autoincrement()) // Unique identifier for the category hierarchy
  category_id  String    // Category ID, assumed to be a string in this case
  group       String    // Group to which the category belongs (e.g., "special")
  hierarchy   String[]  // Array storing the hierarchy levels (e.g., ["Bank Fees", "Overdraft"])


}
